/*
 * Copyright (c) 2023 Andrei Gaevskii
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt {
    quick_tap_ms = <200>;
};

&mt {
    quick_tap_ms = <200>;
};

/ {
    combos {
        compatible = "zmk,combos";

        to_3_l {
            bindings = <&to 4>;
            key-positions = <50 53 12>;
        };

        to_1 {
            bindings = <&to 0>;
            key-positions = <53 54>;
        };

        to_3_r {
            bindings = <&to 4>;
            key-positions = <54 57 25>;
        };

        undo {
            bindings = <&kp LC(Z)>;
            key-positions = <39 40>;
        };

        copy {
            bindings = <&kp LC(C)>;
            key-positions = <40 41>;
        };

        paste {
            bindings = <&kp LC(V)>;
            key-positions = <41 42>;
        };

        cut {
            bindings = <&kp LC(X)>;
            key-positions = <39 42>;
        };
    };

    macros {
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
          &kp GRAVE  &kp N1  &kp N2        &kp N3           &kp N4           &kp N5         &kp N6     &kp N7           &kp N8        &kp N9                  &kp N0    &kp MINUS
&kp LWIN  &kp TAB    &kp Q   &kp W         &kp E            &kp R            &kp T          &kp Y      &kp U            &kp I         &kp O                   &kp P     &kp LBKT       &mt RWIN RBKT
          &kp LCTRL  &kp A   &kp S         &kp D            &kp F            &kp G          &kp H      &kp J            &kp K         &kp L                   &kp SEMI  &mt RCTRL SQT
          &kp LALT   &kp Z   &kp X         &kp C            &kp V            &kp B          &kp N      &kp M            &kp COMMA     &kp DOT                 &kp FSLH  &mt RALT BSLH
                             &mt LGUI TAB  &lt 2 BACKSPACE  &mt LSHFT ENTER  &lt 1 RIGHT    &lt 1 ESC  &mt RSHFT SPACE  &lt 2 DELETE  &mt RGUI RIGHT_BRACKET
            >;
        };

        lower_layer {
            bindings = <
                  &kp F11          &kp F10    &kp F9                &kp F8             &kp F7            &kp F6       &kp F1             &kp F2                &kp F3                          &kp F4               &kp F5          &kp F13
&mt LEFT_GUI F12  &kp UNDER        &kp F1     &kp F2                &kp F3             &kp F4            &kp F5       &kp F6             &kp F7                &kp F8                          &kp F9               &kp F10         &kp F11                  &mt RGUI F12
                  &mt LCTRL GRAVE  &kp EXCL   &mt LEFT_WIN AT_SIGN  &mt LEFT_ALT HASH  &mt LCTRL DOLLAR  &kp PRCNT    &kp LEFT_BRACKET   &mt RCTRL LEFT_BRACE  &mt RIGHT_ALT LEFT_PARENTHESIS  &mt RIGHT_WIN EQUAL  &kp UNDERSCORE  &mt RCTRL RIGHT_BRACKET
                  &mt LALT TILDE   &kp LC(Z)  &kp TILDE             &kp PIPE           &kp GRAVE         &kp CARET    &kp RIGHT_BRACKET  &kp RIGHT_BRACE       &kp RIGHT_PARENTHESIS           &kp GREATER_THAN     &kp AMPERSAND   &mt LEFT_ALT PIPE
                                              &trans                &trans             &trans            &trans       &trans             &trans                &trans                          &trans
            >;
        };

        raise_layer {
            bindings = <
        &trans              &kp KP_NUMLOCK   &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &kp K_CALCULATOR  &kp PRINTSCREEN    &kp K_MUTE              &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_PLAY_PAUSE         &kt K_LOCK      &kp C_SLEEP_MODE
&trans  &kp UNDER           &kp KP_SLASH     &kp KP_N7             &kp KP_N8             &kp KP_N9         &kp KP_MINUS       &kp RC(LEFT_ARROW)      &kp HOME           &kp PG_UP        &kp RC(RIGHT_ARROW)      &kp INSERT      &kp CAPS          &trans
        &mt LCTRL EQUAL     &kp KP_MULTIPLY  &kp KP_N4             &kp KP_N5             &kp KP_N6         &kp KP_PLUS        &kp LEFT_ARROW          &kp DOWN           &kp UP           &kp RIGHT                &kp ESC         &mt RCTRL K_APP
        &mt LEFT_ALT TILDE  &kp KP_N0        &kp KP_N1             &kp KP_N2             &kp KP_N3         &kp KP_DOT         &kp LC(LS(LEFT_ARROW))  &kp END            &kp PG_DN        &kp LC(LS(RIGHT_ARROW))  &kp LS(INSERT)  &kp K_MENU
                                             &trans                &trans                &trans            &trans             &trans                  &trans             &trans           &trans
            >;
        };

        dev {
            bindings = <
          &kp GRAVE  &kp LA(N1)     &kp LA(N2)     &kp LA(N3)         &kp LA(N4)     &kp LA(N5)             &kp LA(N6)          &kp LA(N7)              &kp LA(N8)            &kp LA(N9)           &kp LA(N0)         &kp MINUS
&kp LGUI  &kp TAB    &kp LA(Q)      &kp LA(LS(M))  &kp LC(LS(LA(E)))  &kp LA(RS(R))  &kp LC(LA(SLASH))      &kp Y               &kp LA(HOME)            &kp LA(I)             &kp LC(LA(O))        &kp LA(P)          &kp LA(LS(LBKT))  &kp LA(LS(RBKT))
          &kp LCTRL  &kp LC(LS(A))  &kp LA(S)      &kp LA(LS(F10))    &kp LC(SPACE)  &kp LC(LS(G))          &kp LA(LEFT_ARROW)  &kp LA(DOWN_ARROW)      &kp LA(UP_ARROW)      &kp LA(RIGHT_ARROW)  &kp LC(LS(F8))     &kp APOS
          &kp LALT   &kp LC(Z)      &kp LA(LS(X))  &kp LC(SLASH)      &kp LS(F11)    &kp LC(LA(LS(F11)))    &kp LC(LEFT_BRACE)  &kp LA(LS(DOWN_ARROW))  &kp LA(LS(UP_ARROW))  &kp LC(RIGHT_BRACE)  &kp LC(LA(SLASH))  &kp RIGHT_ALT
                                    &trans         &trans             &trans         &trans                 &trans              &trans                  &trans                &trans
            >;
        };

        adjust_layer {
            bindings = <
       &kp K_POWER  &kp K_SLEEP    &kp K_LOCK     &none          &none          &kp T            &kp T          &none          &none          &kp K_LOCK     &kp K_SLEEP    &kp K_POWER
&none  &bootloader  &none          &none          &none          &none          &none            &none          &none          &none          &none          &none          &bootloader  &none
       &bt BT_CLR   &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4     &bt BT_SEL 4   &bt BT_SEL 3   &bt BT_SEL 2   &bt BT_SEL 1   &bt BT_SEL 0   &bt BT_CLR
       &sys_reset   &bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 2  &bt BT_DISC 3  &bt BT_DISC 4    &bt BT_DISC 4  &bt BT_DISC 3  &bt BT_DISC 2  &bt BT_DISC 1  &bt BT_DISC 0  &sys_reset
                                   &none          &trans         &none          &to 0            &to 0          &none          &trans         &none
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        dev {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
