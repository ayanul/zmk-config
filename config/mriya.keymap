/*
 * Copyright (c) 2023 Andrei Gaevskii
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt {
    quick_tap_ms = <200>;
};

&mt {
    quick_tap_ms = <200>;
};

/ {
    combos {
        compatible = "zmk,combos";

        to_3_l {
            bindings = <&to 3>;
            key-positions = <50 53 12>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <26 11>;
        };

        to_1 {
            bindings = <&to 1>;
            key-positions = <53 54>;
        };

        to_3_r {
            bindings = <&to 3>;
            key-positions = <54 57 25>;
        };

        to_2 {
            bindings = <&to 2>;
            key-positions = <51 54>;
        };

        to_0 {
            bindings = <&to 0>;
            key-positions = <51 56>;
        };
    };

    macros {
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
          &kp GRAVE  &kp N1  &kp N2        &kp N3           &kp N4           &kp N5         &kp N6     &kp N7           &kp N8        &kp N9          &kp N0    &kp MINUS
&kp LWIN  &kp TAB    &kp Q   &kp W         &kp E            &kp R            &kp T          &kp Y      &kp U            &kp I         &kp O           &kp P     &kp LBKT       &mt RWIN RBKT
          &kp LCTRL  &kp A   &kp S         &kp D            &kp F            &kp G          &kp H      &kp J            &kp K         &kp L           &kp SEMI  &mt RCTRL SQT
          &kp LALT   &kp Z   &kp X         &kp C            &kp V            &kp B          &kp N      &kp M            &kp COMMA     &kp DOT         &kp FSLH  &mt RALT BSLH
                             &mt LGUI TAB  &lt 2 BACKSPACE  &mt LSHFT ENTER  &lt 1 RIGHT    &lt 1 ESC  &mt RSHFT SPACE  &lt 2 DELETE  &mt RGUI EQUAL
            >;
        };

        lower_layer {
            bindings = <
        &trans           &trans    &trans  &trans    &trans    &trans       &trans     &trans    &trans    &trans    &trans    &trans
&trans  &kp UNDER        &kp F1    &kp F2  &kp F3    &kp F4    &kp F5       &kp F6     &kp F7    &kp F8    &kp F9    &kp F10   &kp F11          &mt RGUI F12
        &mt LCTRL EQUAL  &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS  &kp STAR  &kp LPAR  &kp RPAR  &mt RCTRL MINUS
        &mt LALT PLUS    &kp N1    &kp N2  &kp N3    &kp N4    &kp N5       &kp N6     &kp N7    &kp N8    &kp N9    &kp N0    &trans
                                   &trans  &trans    &trans    &trans       &trans     &trans    &trans    &trans
            >;
        };

        raise_layer {
            bindings = <
        &trans             &trans           &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &kp K_CALCULATOR  &kp PRINTSCREEN    &kp K_MUTE          &kp C_VOLUME_DOWN   &kp C_VOLUME_UP   &kp C_PLAY_PAUSE     &kt K_LOCK      &kp C_SLEEP_MODE
&trans  &kp KP_NUM         &kp KP_SLASH     &kp KP_N7             &kp KP_N8             &kp KP_N9         &kp KP_MINUS       &kp HOME            &kp PAGE_DOWN       &kp PAGE_UP       &kp END              &kp INSERT      &kp CAPS          &trans
        &mt LCTRL EQUAL    &kp KP_MULTIPLY  &kp KP_N4             &kp KP_N5             &kp KP_N6         &kp KP_PLUS        &kp LEFT_ARROW      &kp DOWN            &kp UP            &kp RIGHT            &kp ESC         &mt RCTRL K_APP
        &mt LEFT_ALT PLUS  &kp KP_N0        &kp KP_N1             &kp KP_N2             &kp KP_N3         &kp KP_DOT         &kp LC(LEFT_ARROW)  &kp LC(DOWN_ARROW)  &kp LC(UP_ARROW)  &kp LC(RIGHT_ARROW)  &kp LS(INSERT)  &trans
                                            &trans                &trans                &trans            &trans             &trans              &trans              &trans            &trans
            >;
        };

        adjust_layer {
            bindings = <
       &kp K_POWER  &kp K_SLEEP    &kp K_LOCK     &none          &none          &kp T            &kp T          &none          &none          &kp K_LOCK     &kp K_SLEEP    &kp K_POWER
&none  &bootloader  &none          &none          &none          &none          &none            &none          &none          &none          &none          &none          &bootloader  &none
       &bt BT_CLR   &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4     &bt BT_SEL 4   &bt BT_SEL 3   &bt BT_SEL 2   &bt BT_SEL 1   &bt BT_SEL 0   &bt BT_CLR
       &sys_reset   &bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 2  &bt BT_DISC 3  &bt BT_DISC 4    &bt BT_DISC 4  &bt BT_DISC 3  &bt BT_DISC 2  &bt BT_DISC 1  &bt BT_DISC 0  &sys_reset
                                   &none          &trans         &none          &to 0            &to 0          &none          &trans         &none
            >;
        };

        dev {
            bindings = <
          &kp GRAVE  &kp N1     &kp N2     &kp N3         &kp N4         &kp N5           &kp N6  &kp N7  &kp N8     &kp N9   &kp N0         &kp MINUS
&kp LGUI  &kp TAB    &kp Q      &kp W      &kp LC(LS(E))  &kp LC(LS(R))  &kp LC(LS(T))    &kp Y   &kp U   &kp I      &kp O    &kp P          &kp LBKT       &kp RBKT
          &kp LCTRL  &kp LC(A)  &kp S      &kp D          &kp F          &kp LC(LS(G))    &kp H   &kp J   &kp K      &kp L    &kp SEMI       &kp APOS
          &kp LALT   &kp LC(Z)  &kp LC(X)  &kp LC(C)      &kp LC(V)      &kp B            &kp N   &kp M   &kp COMMA  &kp DOT  &kp LC(SLASH)  &kp RIGHT_ALT
                                &trans     &trans         &trans         &trans           &trans  &trans  &trans     &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        dev {
            if-layers = <1 2>;
            then-layer = <4>;
        };
    };
};
